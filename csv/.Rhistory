count(Artist) %>%
arrange(desc(n))
# Create a pie chart
pie_chart <- ggplot(artist_counts, aes(x = "", y = n, fill = Artist)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +  # Convert to a pie chart
labs(
title = "Top Artists in the Top 50 Songs",
fill = "Artist"
) +
theme_void()  # Remove unnecessary elements
# Display the pie chart
print(pie_chart)
# Load required packages
library(dplyr)
library(ggplot2)
# Count the number of songs for each artist, including features, from 'top_50_popular_tracks'
artist_counts <- top_50_popular_tracks %>%
mutate(Artist = strsplit(`Artist Name(s)`, ", ")) %>%
unnest(Artist) %>%
count(Artist) %>%
arrange(desc(n))
# Create a bar chart
bar_chart <- ggplot(artist_counts, aes(x = reorder(Artist, -n), y = n, fill = Artist)) +
geom_bar(stat = "identity") +
labs(
title = "Top Artists in the Top 50 Songs",
x = "Artist",
y = "Count",
fill = "Artist"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Display the bar chart
print(bar_chart)
# Assuming you've already loaded the required packages and defined 'top_50_popular_tracks' data frame
# Count the number of songs for each artist, including features, from 'top_50_popular_tracks'
artist_counts <- top_50_popular_tracks %>%
mutate(Artist = strsplit(`Artist Name(s)`, ", ")) %>%
unnest(Artist) %>%
count(Artist) %>%
arrange(desc(n))
# Select the top 10 artists
top_10_artists <- head(artist_counts, 10)
# Create a bar chart with labels showing the count values for the top 10 artists within the bars
bar_chart <- ggplot(top_10_artists, aes(x = reorder(Artist, -n), y = n, fill = Artist)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n), vjust = 2, size = 5, color = "white") +  # Add labels within the bars
labs(
title = "Top 10 Artists in the Top 50 Songs",
x = "Artist",
y = "Count",
fill = "Artist"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Display the bar chart
print(bar_chart)
# Load required packages
library(dplyr)
library(tidyr)
library(ggplot2)
# Sort the dataset in descending order of popularity
sorted_data <- TenK_most_popular_tracks %>%
arrange(desc(Popularity))
# Create a new data frame with the top 100 most popular songs
top_100_popular_tracks <- head(sorted_data, 100)
# Extract the year from the "Album Release Date" column
top_100_popular_tracks <- top_100_popular_tracks %>%
mutate(Year = as.integer(substring(`Album Release Date`, nchar(`Album Release Date`) - 3, nchar(`Album Release Date`))))  # Extract the year
# Split the "Year" column into two columns: start year and end year
top_100_popular_tracks <- top_100_popular_tracks %>%
group_by(`Artist Name(s)`) %>%
arrange(`Artist Name(s)`, Year) %>%
summarise(HitCount = n(), YearStart = first(Year), YearEnd = last(Year))
# Calculate the year range as a character string
top_100_popular_tracks <- top_100_popular_tracks %>%
mutate(
YearRange = ifelse(YearStart == YearEnd, as.character(YearStart),
paste(YearStart, "-", YearEnd))
)
# Define a custom color palette with 34 distinct colors
custom_palette <- c(
"#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
"#aec7e8", "#ffbb78", "#98df8a", "#ff9896", "#c5b0d5", "#c49c94", "#f7b6d2", "#c7c7c7", "#dbdb8d", "#9edae5",
"#393b79", "#e7ba52", "#ad494a", "#d6616b", "#7b4173", "#637939", "#d6616b", "#637939", "#8c6d31", "#843c39",
"#d5a4b2", "#a55194", "#ce6dbd", "#bd9e39", "#8ca252"
)
# Create a bar chart with the extended custom color palette
bar_chart_artist_hits <- ggplot(top_100_popular_tracks, aes(x = `Artist Name(s)`, y = HitCount, fill = YearRange)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_palette) +  # Use the extended custom palette
labs(
title = "Artist Hits by Year Range (Top 100 most heard Songs)",
x = "Artist Name(s)",
y = "Hit Count",
fill = "Year Range"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Display the bar chart with the extended custom color palette
print(bar_chart_artist_hits)
# Create a new data frame with the top 50 most popular songs
top_50_popular_tracks_chart <- head(sorted_data, 50)
# Extract the year from the "Album Release Date" column
top_50_popular_tracks_chart <- top_50_popular_tracks_chart %>%
mutate(Year = as.integer(substring(`Album Release Date`, nchar(`Album Release Date`) - 3, nchar(`Album Release Date`))))  # Extract the year
# Split the "Year" column into two columns: start year and end year
top_50_popular_tracks_chart <- top_50_popular_tracks_chart %>%
group_by(`Artist Name(s)`) %>%
arrange(`Artist Name(s)`, Year) %>%
summarise(HitCount = n(), YearStart = first(Year), YearEnd = last(Year))
# Calculate the year range as a character string
top_50_popular_tracks_chart <- top_50_popular_tracks_chart %>%
mutate(
YearRange = ifelse(YearStart == YearEnd, as.character(YearStart),
paste(YearStart, "-", YearEnd))
)
# Create a bar chart with the extended custom color palette for the top 50 most heard songs
bar_chart_artist_hits_top_50 <- ggplot(top_50_popular_tracks_chart, aes(x = `Artist Name(s)`, y = HitCount, fill = YearRange)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_palette) +  # Use the extended custom palette
labs(
title = "Artist Hits by Year Range (Top 50 most heard Songs)",
x = "Artist Name(s)",
y = "Hit Count",
fill = "Year Range"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Display the bar chart with the extended custom color palette for the top 50 most heard songs
print(bar_chart_artist_hits_top_50)
# # Export the top_50_songs data frame as a CSV file
# write.csv(top_50_songs, "top_50_songs.csv", row.names = FALSE)
# Load required packages
library(dplyr)
# Sort the dataset in descending order of popularity
sorted_data <- TenK_most_popular_tracks %>%
arrange(desc(Popularity))
# Create a new data frame with the top 1000 most popular songs
top_1000_popular_tracks <- head(sorted_data, 1000)
# Extract the year from the "Album Release Date" column
top_1000_popular_tracks <- top_1000_popular_tracks %>%
mutate(Year = as.integer(substring(`Album Release Date`, nchar(`Album Release Date`) - 3, nchar(`Album Release Date`))))  # Extract the year
# Split the "Year" column into two columns: start year and end year
top_1000_popular_tracks <- top_1000_popular_tracks %>%
group_by(`Artist Name(s)`) %>%
arrange(`Artist Name(s)`, Year) %>%
summarise(HitCount = n(), YearStart = first(Year), YearEnd = last(Year))
# Calculate the year range as a character string
top_1000_popular_tracks <- top_1000_popular_tracks %>%
mutate(
YearRange = ifelse(YearStart == YearEnd, as.character(YearStart),
paste(YearStart, "-", YearEnd))
)
# Sort the artists based on the length of their year ranges in descending order
top_20_artists_longest_year_ranges <- top_1000_popular_tracks %>%
arrange(desc(YearEnd - YearStart)) %>%
head(20)
# Print or view the resulting data frame
print(top_20_artists_longest_year_ranges)
# Load required packages
library(dplyr)
# Sort the dataset in descending order of popularity
sorted_data <- TenK_most_popular_tracks %>%
arrange(desc(Popularity))
# Create a new data frame with the top 1000 most popular songs
top_1000_popular_tracks <- head(sorted_data, 1000)
# Extract the year from the "Album Release Date" column
top_1000_popular_tracks <- top_1000_popular_tracks %>%
mutate(Year = as.integer(substring(`Album Release Date`, nchar(`Album Release Date`) - 3, nchar(`Album Release Date`))))  # Extract the year
# Split the "Year" column into two columns: start year and end year
top_1000_popular_tracks <- top_1000_popular_tracks %>%
group_by(`Artist Name(s)`) %>%
arrange(`Artist Name(s)`, Year) %>%
summarise(HitCount = n(), YearStart = first(Year), YearEnd = last(Year), `Artist Genres` = first(`Artist Genres`))
# Calculate the year range as a character string
top_1000_popular_tracks <- top_1000_popular_tracks %>%
mutate(
YearRange = ifelse(YearStart == YearEnd, as.character(YearStart),
paste(YearStart, "-", YearEnd))
)
# Sort the artists based on the length of their year ranges in descending order
top_25_artists_longest_year_ranges <- top_1000_popular_tracks %>%
arrange(desc(YearEnd - YearStart)) %>%
head(25)
# Print or view the resulting data frame
print(top_25_artists_longest_year_ranges)
# Export the top 25 artists with the longest year ranges to a CSV file
write.csv(top_25_artists_longest_year_ranges, file = "top_25_artists_longest_year_ranges.csv", row.names = FALSE)
# Check if the CSV file has been created successfully
file.exists("top_25_artists_longest_year_ranges.csv")
#Make sure...
# Convert song duration from ms to seconds
top_50_popular_tracks$`Song Duration (s)` <- top_50_popular_tracks$`Track Duration (ms)` / 1000
# Load required packages
library(ggplot2)
# Define the green color
dot_color <- "#1AA64B"
# Create a scatterplot with larger dots and green color
scatterplot <- ggplot(top_50_popular_tracks, aes(x = Popularity, y = `Song Duration (s)`)) +
geom_point(size = 3, color = dot_color) +  # Increase dot size and set color
labs(
title = "Popularity vs. Song Duration (Top 50 Songs)",
x = "Popularity Score",
y = "Song Duration (seconds)"
) +
theme_minimal()
# Display the scatterplot
print(scatterplot)
# Export the top_50_popular_tracks
write.csv(top_50_popular_tracks, file = "top_50_popular_tracks.csv", row.names = FALSE)
# Check if the CSV file has been created successfully
file.exists("top_50_popular_tracks.csv")
install.packages("plotly")
# Load the necessary packages
library(plotly)
library(dplyr)
# Create a table with counts of songs by year
year_counts <- top_50_popular_tracks %>%
group_by(Year) %>%
summarise(Count = n())
# Create an interactive treemap chart with a title and subtitle as annotations
treemap_chart <- plot_ly(
data = year_counts,
labels = ~Year,
parents = "",
values = ~Count,
text = ~paste("Count: ", Count),  # Add labels with count values
type = "treemap",
branchvalues = "total"  # Ensure proportional box sizes
) %>%
layout(
annotations = list(
text = "Top 50 most popular songs on Spotify",  # Updated to top 50
x = 0.5,  # Adjust the x-coordinate to center the subtitle
y = -0.15,  # Adjust the y-coordinate to position the subtitle
showarrow = FALSE,
xref = "paper",
yref = "paper",
font = list(size = 14)  # Adjust the font size of the subtitle
),
title = "Top 50 most popular tracks by Year",  # Updated to top 50
xaxis = list(title = "Year"),
yaxis = list(title = "Count"),
margin = list(l = 10, r = 10, b = 10, t = 40),
paper_bgcolor = "lightgray"
)
# Display the treemap chart
treemap_chart
# Export year_counts data frame as a CSV file
write.csv(year_counts, "year_counts.csv", row.names = FALSE)
# Check if the CSV file has been created successfully
file.exists("year_counts.csv")
# Count the number of songs with more than one genre
songs_with_multiple_genres <- top_50_popular_tracks %>%
filter(str_count(`Artist Genres`, ",") > 0)
# Get the count and percentage
count_of_songs <- nrow(songs_with_multiple_genres)
percentage <- (count_of_songs / 50) * 100
count_of_songs
percentage
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Count), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none)
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Count), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Count), position = position_dodge(0.9), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Count), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Count), vjust = -0.5, color = "white", size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Count), vjust = 1.5, size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "white") +
geom_text(aes(label = Count), vjust = 1.5, size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", color = "white") +
geom_text(aes(label = Count), vjust = 1.5, size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count, color = "white"), vjust = 1.5, size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
# Load the ggplot2 library
library(ggplot2)
# Create a data frame for visualization
data <- data.frame(
Category = c("Songs with Multiple Genres", "Songs with Single Genre"),
Count = c(count_of_songs, 50 - count_of_songs)
)
# Create a bar chart
bar_chart <- ggplot(data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), color = "white", vjust = 1.5, size = 5) +
labs(title = "Songs with Multiple Genres vs. Songs with Single Genre",
y = "Count",
fill = "Category") +
scale_fill_manual(values = c("#1AA64B", "#29683E")) +
theme_minimal() +
theme(legend.position = "none")
# Display the bar chart
print(bar_chart)
